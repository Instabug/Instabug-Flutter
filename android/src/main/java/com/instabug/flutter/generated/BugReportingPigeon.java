// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.instabug.flutter.generated;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class BugReportingPigeon {
  private static class BugReportingFlutterApiCodec extends StandardMessageCodec {
    public static final BugReportingFlutterApiCodec INSTANCE = new BugReportingFlutterApiCodec();
    private BugReportingFlutterApiCodec() {}
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class BugReportingFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public BugReportingFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return BugReportingFlutterApiCodec.INSTANCE;
    }

    public void onSdkInvoke(Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingFlutterApi.onSdkInvoke", getCodec());
      channel.send(null, channelReply -> {
        callback.reply(null);
      });
    }
    public void onSdkDismiss(@NonNull String dismissTypeArg, @NonNull String reportTypeArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingFlutterApi.onSdkDismiss", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(dismissTypeArg, reportTypeArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static class BugReportingHostApiCodec extends StandardMessageCodec {
    public static final BugReportingHostApiCodec INSTANCE = new BugReportingHostApiCodec();
    private BugReportingHostApiCodec() {}
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface BugReportingHostApi {
    void setEnabled(@NonNull Boolean isEnabled);
    void show(@NonNull String reportType, @NonNull List<String> invocationOptions);
    void setInvocationEvents(@NonNull List<String> events);
    void setReportTypes(@NonNull List<String> types);
    void setExtendedBugReportMode(@NonNull String mode);
    void setInvocationOptions(@NonNull List<String> options);
    void setFloatingButtonEdge(@NonNull String edge, @NonNull Long offset);
    void setVideoRecordingFloatingButtonPosition(@NonNull String position);
    void setShakingThresholdForiPhone(@NonNull Double threshold);
    void setShakingThresholdForiPad(@NonNull Double threshold);
    void setShakingThresholdForAndroid(@NonNull Long threshold);
    void setEnabledAttachmentTypes(@NonNull Boolean screenshot, @NonNull Boolean extraScreenshot, @NonNull Boolean galleryImage, @NonNull Boolean screenRecording);
    void bindOnInvokeCallback();
    void bindOnDismissCallback();
    void setDisclaimerText(@NonNull String text);
    void setCommentMinimumCharacterCount(@NonNull Long limit, @Nullable List<String> reportTypes);

    /** The codec used by BugReportingHostApi. */
    static MessageCodec<Object> getCodec() {
      return BugReportingHostApiCodec.INSTANCE;
    }

    /** Sets up an instance of `BugReportingHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BugReportingHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean isEnabledArg = (Boolean)args.get(0);
              if (isEnabledArg == null) {
                throw new NullPointerException("isEnabledArg unexpectedly null.");
              }
              api.setEnabled(isEnabledArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.show", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String reportTypeArg = (String)args.get(0);
              if (reportTypeArg == null) {
                throw new NullPointerException("reportTypeArg unexpectedly null.");
              }
              List<String> invocationOptionsArg = (List<String>)args.get(1);
              if (invocationOptionsArg == null) {
                throw new NullPointerException("invocationOptionsArg unexpectedly null.");
              }
              api.show(reportTypeArg, invocationOptionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setInvocationEvents", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<String> eventsArg = (List<String>)args.get(0);
              if (eventsArg == null) {
                throw new NullPointerException("eventsArg unexpectedly null.");
              }
              api.setInvocationEvents(eventsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setReportTypes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<String> typesArg = (List<String>)args.get(0);
              if (typesArg == null) {
                throw new NullPointerException("typesArg unexpectedly null.");
              }
              api.setReportTypes(typesArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setExtendedBugReportMode", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String modeArg = (String)args.get(0);
              if (modeArg == null) {
                throw new NullPointerException("modeArg unexpectedly null.");
              }
              api.setExtendedBugReportMode(modeArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setInvocationOptions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<String> optionsArg = (List<String>)args.get(0);
              if (optionsArg == null) {
                throw new NullPointerException("optionsArg unexpectedly null.");
              }
              api.setInvocationOptions(optionsArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setFloatingButtonEdge", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String edgeArg = (String)args.get(0);
              if (edgeArg == null) {
                throw new NullPointerException("edgeArg unexpectedly null.");
              }
              Number offsetArg = (Number)args.get(1);
              if (offsetArg == null) {
                throw new NullPointerException("offsetArg unexpectedly null.");
              }
              api.setFloatingButtonEdge(edgeArg, (offsetArg == null) ? null : offsetArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setVideoRecordingFloatingButtonPosition", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String positionArg = (String)args.get(0);
              if (positionArg == null) {
                throw new NullPointerException("positionArg unexpectedly null.");
              }
              api.setVideoRecordingFloatingButtonPosition(positionArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setShakingThresholdForiPhone", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Double thresholdArg = (Double)args.get(0);
              if (thresholdArg == null) {
                throw new NullPointerException("thresholdArg unexpectedly null.");
              }
              api.setShakingThresholdForiPhone(thresholdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setShakingThresholdForiPad", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Double thresholdArg = (Double)args.get(0);
              if (thresholdArg == null) {
                throw new NullPointerException("thresholdArg unexpectedly null.");
              }
              api.setShakingThresholdForiPad(thresholdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setShakingThresholdForAndroid", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number thresholdArg = (Number)args.get(0);
              if (thresholdArg == null) {
                throw new NullPointerException("thresholdArg unexpectedly null.");
              }
              api.setShakingThresholdForAndroid((thresholdArg == null) ? null : thresholdArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setEnabledAttachmentTypes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean screenshotArg = (Boolean)args.get(0);
              if (screenshotArg == null) {
                throw new NullPointerException("screenshotArg unexpectedly null.");
              }
              Boolean extraScreenshotArg = (Boolean)args.get(1);
              if (extraScreenshotArg == null) {
                throw new NullPointerException("extraScreenshotArg unexpectedly null.");
              }
              Boolean galleryImageArg = (Boolean)args.get(2);
              if (galleryImageArg == null) {
                throw new NullPointerException("galleryImageArg unexpectedly null.");
              }
              Boolean screenRecordingArg = (Boolean)args.get(3);
              if (screenRecordingArg == null) {
                throw new NullPointerException("screenRecordingArg unexpectedly null.");
              }
              api.setEnabledAttachmentTypes(screenshotArg, extraScreenshotArg, galleryImageArg, screenRecordingArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.bindOnInvokeCallback", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.bindOnInvokeCallback();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.bindOnDismissCallback", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.bindOnDismissCallback();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setDisclaimerText", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String textArg = (String)args.get(0);
              if (textArg == null) {
                throw new NullPointerException("textArg unexpectedly null.");
              }
              api.setDisclaimerText(textArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BugReportingHostApi.setCommentMinimumCharacterCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number limitArg = (Number)args.get(0);
              if (limitArg == null) {
                throw new NullPointerException("limitArg unexpectedly null.");
              }
              List<String> reportTypesArg = (List<String>)args.get(1);
              api.setCommentMinimumCharacterCount((limitArg == null) ? null : limitArg.longValue(), reportTypesArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
