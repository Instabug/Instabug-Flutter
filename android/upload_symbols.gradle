
import java.util.zip.ZipOutputStream
import java.util.zip.ZipEntry

/**
  * task to upload symbols to Instabug endpoint
*/
task upload_symbols_task {
    // If obfuscate flag not provided, exit the script
    if (!project.hasProperty('dart-obfuscation') || project['dart-obfuscation'] == 'false') {
        return
    }

    // Get root host directory path
    String rootProjectPath = project.properties['rootDir']
    File rootFile = new File(rootProjectPath)

    // Get the path of the symbols directory
    String obfuscationPath = project['split-debug-info']
    File obfuscationFile = new File(obfuscationPath)
    String fullPath

    // If the provided path is relative
    // append the symbols directory to the root project path to get the full path
    if (obfuscationFile.absolute) {
        fullPath = obfuscationPath
    } else {
        fullPath = rootFile.parent + File.separator + obfuscationPath
    }

    doLast { upload_symbols(fullPath) }
}

/**
  * upload symbol files to Instabug endpoint
  *
  * @param symbolsPath the path of the symbols directory
  * @return void
*/
ext.upload_symbols = { symbolsPath ->
    // Get local properties
    Properties properties = new Properties()
    File propertiesFile = project.rootProject.file('local.properties')
    if (propertiesFile.exists()) {
        properties.load(propertiesFile.newDataInputStream())
    }

    // Get the app token if provided
    if (System.getenv('INSTABUG_APP_TOKEN') == null &&  properties.getProperty('INSTABUG_APP_TOKEN') == null) {
        println('Instabug: err: INSTABUG_APP_TOKEN not found. Make sure you\'ve added the environment variable INSTABUG_APP_TOKEN')
        return
    }
    println('Instabug: Instabug: INSTABUG_APP_TOKEN found')

    // Get the API KEY if provided
    if (System.getenv('INSTABUG_API_KEY') == null && properties.getProperty('INSTABUG_API_KEY') == null) {
        println('Instabug: err: INSTABUG_API_KEY not found. Make sure you\'ve added the environment variable INSTABUG_API_KEY')
        return
    }

    println 'Instabug: Instabug: INSTABUG_API_KEY found'
    println 'Instabug: Uploading files...'

    // Check if the symbols directory provided exists
    File symbolsDir = new File(symbolsPath)
    if (!symbolsDir.exists()) {
        println 'Instabug: err: Symbols directory not found'
        return
    }

    // Search in symbolsPath for files with extension .symbols and add them to a list
    List<File> symbolsFiles = symbolsDir.listFiles().findAll { file -> file.path.endsWith('.symbols') }
    if (symbolsFiles.empty) {
        println 'Instabug: err: No symbols files found'
        return
    }
    println "Instabug: ${symbolsFiles.size()} Symbols files found"

    // Print list of symbols files
    symbolsFiles.forEach { file ->
        println "Instabug: ${file.path}"
    }

    // Create a zip file with the symbols files
    zip_symbols(symbolsPath, symbolsFiles)
}

/**
  * create a zip file with the symbols files
  *
  * @param symbolsPath the path of the symbols directory
  * @param symbolsFiles the list of symbols files
  * @return zipFile the zip file created
*/
ext.zip_symbols = { symbolsPath, symbolsFiles ->
    File zipFile = new File(symbolsPath + '.zip')
    ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile))
    symbolsFiles.forEach { file ->
        String fileName = file.path.substring(symbolsPath.length() + 1)
        ZipEntry zipEntry = new ZipEntry(fileName)
        zipOutputStream.putNextEntry(zipEntry)
        FileInputStream fileInputStream = new FileInputStream(file)
        byte[] buffer = new byte[1024]
        int length = fileInputStream.read(buffer)
        while (length > 0) {
            zipOutputStream.write(buffer, 0, length)
            length = fileInputStream.read(buffer)
        }
        fileInputStream.close()
        zipOutputStream.closeEntry()
    }
    zipOutputStream.close()
    println "Instabug: Zip file created at ${zipFile.path}"
    return zipFile
}
