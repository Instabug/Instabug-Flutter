import java.util.zip.ZipOutputStream
import java.util.zip.ZipEntry

ext.boundary = 'abcd' + Long.toString(System.currentTimeMillis()) * 2 + 'dcba'
ext.lineEnd = '\r\n'

/**
 * task to upload symbols to Instabug endpoint
 */
task upload_symbols_task {
    doLast {
        try {
            String symbolsPath
            String applicationToken
            String apiKey
            List config

            // If obfuscate flag not provided, exit the task
            if (!project.hasProperty('dart-obfuscation') || project['dart-obfuscation'] == 'false') {
                return
            }

            config = get_config()
            if (!config) {
                return
            }
            (symbolsPath, applicationToken, apiKey) = config

            // Prepare zip file with symbols
            File zipFile = prepare_zip_file(symbolsPath)
            if (!zipFile) {
                return
            }

            upload_symbols(zipFile, applicationToken, apiKey)
        } catch (Exception e) {
            println("Instabug err: uploading symbols: ${e.message}")
        }
    }
}
/**
 * get upload configs
 * @return symbolsPath the path of the symbols directory
 * @return applicationToken the application token
 * @return apiKey the api key
 */

def get_config() {
    try {
        String applicationToken
        String apiKey

        // Get local properties
        Properties properties = new Properties()
        File propertiesFile = project.rootProject.file('local.properties')
        if (propertiesFile.exists()) {
            properties.load(propertiesFile.newDataInputStream())
        }

        // Get the app token if provided
        if (System.getenv('INSTABUG_APP_TOKEN') == null && properties.getProperty('INSTABUG_APP_TOKEN') == null) {
            println('Instabug: err: INSTABUG_APP_TOKEN not found. Make sure you\'ve added the environment variable INSTABUG_APP_TOKEN')
            return null
        }
        applicationToken = System.getenv('INSTABUG_APP_TOKEN') != null ? System.getenv('INSTABUG_APP_TOKEN') : properties.getProperty('INSTABUG_APP_TOKEN')
        println('Instabug: INSTABUG_APP_TOKEN found')

        // Get the API KEY if provided
        if (System.getenv('INSTABUG_API_KEY') == null && properties.getProperty('INSTABUG_API_KEY') == null) {
            println('Instabug: err: INSTABUG_API_KEY not found. Make sure you\'ve added the environment variable INSTABUG_API_KEY')
            return null
        }
        apiKey = System.getenv('INSTABUG_API_KEY') != null ? System.getenv('INSTABUG_API_KEY') : properties.getProperty('INSTABUG_API_KEY')
        println 'Instabug: INSTABUG_API_KEY found'

        // Get root host directory path
        String rootProjectPath = project.properties['rootDir']
        File rootFile = new File(rootProjectPath)

        // Get the path of the symbols directory
        String obfuscationPath = project['split-debug-info']
        File obfuscationFile = new File(obfuscationPath)
        String symbolsPath

        // If the provided path is relative
        // append the symbols directory to the root project path to get the full path
        if (obfuscationFile.absolute) {
            symbolsPath = obfuscationPath
        } else {
            symbolsPath = rootFile.parent + File.separator + obfuscationPath
        }
        return [symbolsPath, applicationToken, apiKey]
    } catch (Exception e) {
        println("Instabug err: getting config: ${e.message}")
    }
}

/**
 * search for the symbols files in the symbols directory
 * and create a zip file with the symbols files
 * @param symbolsPath the path of the symbols directory
 * @return zipFile the zip file created
 */

File prepare_zip_file(String symbolsPath) {
    // Check if the symbols directory provided exists
    File symbolsDir = new File(symbolsPath)
    if (!symbolsDir.exists()) {
        println 'Instabug: err: Symbols directory not found'
        return null
    }

    // Search in symbolsPath for files with extension .symbols and add them to a list
    List<File> symbolsFiles = symbolsDir.listFiles().findAll { file -> file.path.endsWith('.symbols') }
    if (symbolsFiles.empty) {
        println 'Instabug: err: No symbols files found'
        return null
    }
    println "Instabug: ${symbolsFiles.size()} Symbols files found"

    // Create a zip file with the symbols files
    File zipFile = zip_files(symbolsPath, symbolsFiles)

    return zipFile
}
/**
 * create a zip file with the symbols files
 *
 * @param symbolsPath the path of the symbols directory
 * @param symbolsFiles the list of symbols files
 * @return zipFile the zip file created
 */

File zip_files(String symbolsPath, List<File> symbolsFiles) {
    File zipFile = new File(symbolsPath + '.zip')
    ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile))
    symbolsFiles.forEach { file ->
        String fileName = file.path.substring(symbolsPath.length() + 1)
        ZipEntry zipEntry = new ZipEntry(fileName)
        zipOutputStream.putNextEntry(zipEntry)
        FileInputStream fileInputStream = new FileInputStream(file)
        byte[] buffer = new byte[1024]
        int length = fileInputStream.read(buffer)
        while (length > 0) {
            zipOutputStream.write(buffer, 0, length)
            length = fileInputStream.read(buffer)
        }
        fileInputStream.close()
        zipOutputStream.closeEntry()
    }
    zipOutputStream.close()
    println "Instabug: Zip file created at ${zipFile.path}"
    return zipFile
}
/**
 * upload symbol files to Instabug endpoint
 *
 * @param zipFile the zip file containing the symbols files
 * @param applicationToken the app token
 * @param apiKey the api key
 * @return void
 */
def upload_symbols(File zipFile, String applicationToken, String apiKey) {
    // Initialize connection
    String uploadUrl = 'https://backend-5659.instabug-dev.com/api/web/public/flutter-symbol-files/android'
    HttpURLConnection connection = new URL(uploadUrl).openConnection() as HttpURLConnection

    // Set connection headers and request method
    connection.setRequestMethod('POST')
    connection.setRequestProperty('Connection', 'Keep-Alive')
    connection.setRequestProperty('Content-Type', "multipart/form-data;boundary=${boundary}")
    connection.setRequestProperty('Accept-Encoding', 'gzip')
    connection.setRequestProperty('Content-Length', "${zipFile.length()}")
    connection.setDoOutput(true)

    // Initialize output stream and writer
    OutputStream outputStream = connection.getOutputStream()
    String charset = 'ISO-8859-1'
    PrintWriter writer = new PrintWriter(new OutputStreamWriter(outputStream, charset), true)

    // Write application_token in the request body
    writeField(writer, 'application_token', applicationToken)

    // Write api_key in the request body
    writeField(writer, 'api_key', apiKey)

    // Write zip file in the request body
    String fileName = zipFile.getName()
    writeFile(writer, fileName, zipFile, outputStream)

    // Send the request
    writer.close()

    // Get the response
    int responseCode = connection.getResponseCode()
    println "Instabug: Response Code: ${responseCode}"
    println "Instabug: Response Message: ${connection.getResponseMessage()}"
    if (responseCode == 200) {
        println 'Instabug: Upload successful'
    } else {
        println 'Instabug: Upload failed'
    }

    // Close the connection
    connection.disconnect()
    // Delete the zip file
    zipFile.delete()
}
/**
 * write a field in the request body
 * @param writer the writer
 * @param field the name of the field
 * @param value the value of the field
 * @return void
 */
def writeField(writer, field, value) {
    writer.append('--' + boundary).append(lineEnd)
    writer.append("Content-Disposition: form-data; name=\"" + field + "\"").append(lineEnd)
    writer.append(lineEnd)
    writer.append(value).append(lineEnd)
}
/**
 * write a field in the request body
 * @param writer the writer
 * @param fileName the name of the file
 * @param file the file to be uploaded
 * @param outputStream the output stream
 * @return void
 */
def writeFile(writer, fileName, file, outputStream) {
    writer.append('--' + boundary).append(lineEnd)
    writer.append("Content-Disposition: form-data; name=\"" + 'file' + "\"; filename=\"" + fileName + "\"").append(lineEnd);
    writer.append('Content-Type: ' + URLConnection.guessContentTypeFromName(fileName)).append(lineEnd)
    writer.append(lineEnd)
    writer.flush()
    FileInputStream inputStream = new FileInputStream(file)
    byte[] buffer = new byte[4096]
    int bytesRead = -1
    while ((bytesRead = inputStream.read(buffer)) != -1) {
        outputStream.write(buffer, 0, bytesRead)
    }
    outputStream.flush()
    inputStream.close()
    writer.append('--' + boundary).append(lineEnd)
    writer.flush()
}
