// Mocks generated by Mockito 5.4.4 from annotations
// in instabug_flutter/test/network_logger_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:math' as _i14;
import 'dart:typed_data' as _i9;

import 'package:instabug_flutter/instabug_flutter.dart' as _i2;
import 'package:instabug_flutter/src/generated/apm.api.g.dart' as _i6;
import 'package:instabug_flutter/src/generated/instabug.api.g.dart' as _i8;
import 'package:instabug_flutter/src/models/generated_w3c_header.dart' as _i4;
import 'package:instabug_flutter/src/models/trace_partial_id.dart' as _i3;
import 'package:instabug_flutter/src/models/w3c_feature_flags.dart' as _i5;
import 'package:instabug_flutter/src/utils/feature_flags_manager.dart' as _i15;
import 'package:instabug_flutter/src/utils/ibg_build_info.dart' as _i10;
import 'package:instabug_flutter/src/utils/network_manager.dart' as _i12;
import 'package:instabug_flutter/src/utils/w3c_header_utils.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNetworkData_0 extends _i1.SmartFake implements _i2.NetworkData {
  _FakeNetworkData_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTracePartialId_1 extends _i1.SmartFake
    implements _i3.TracePartialId {
  _FakeTracePartialId_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeneratedW3CHeader_2 extends _i1.SmartFake
    implements _i4.GeneratedW3CHeader {
  _FakeGeneratedW3CHeader_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeW3cFeatureFlags_3 extends _i1.SmartFake
    implements _i5.W3cFeatureFlags {
  _FakeW3cFeatureFlags_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApmHostApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockApmHostApi extends _i1.Mock implements _i6.ApmHostApi {
  MockApmHostApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> setEnabled(bool? arg_isEnabled) => (super.noSuchMethod(
        Invocation.method(
          #setEnabled,
          [arg_isEnabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isEnabled,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> setScreenLoadingEnabled(bool? arg_isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setScreenLoadingEnabled,
          [arg_isEnabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isScreenLoadingEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isScreenLoadingEnabled,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> setColdAppLaunchEnabled(bool? arg_isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setColdAppLaunchEnabled,
          [arg_isEnabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setAutoUITraceEnabled(bool? arg_isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAutoUITraceEnabled,
          [arg_isEnabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String?> startExecutionTrace(
    String? arg_id,
    String? arg_name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startExecutionTrace,
          [
            arg_id,
            arg_name,
          ],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<void> startFlow(String? arg_name) => (super.noSuchMethod(
        Invocation.method(
          #startFlow,
          [arg_name],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setFlowAttribute(
    String? arg_name,
    String? arg_key,
    String? arg_value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFlowAttribute,
          [
            arg_name,
            arg_key,
            arg_value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> endFlow(String? arg_name) => (super.noSuchMethod(
        Invocation.method(
          #endFlow,
          [arg_name],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setExecutionTraceAttribute(
    String? arg_id,
    String? arg_key,
    String? arg_value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExecutionTraceAttribute,
          [
            arg_id,
            arg_key,
            arg_value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> endExecutionTrace(String? arg_id) => (super.noSuchMethod(
        Invocation.method(
          #endExecutionTrace,
          [arg_id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> startUITrace(String? arg_name) => (super.noSuchMethod(
        Invocation.method(
          #startUITrace,
          [arg_name],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> endUITrace() => (super.noSuchMethod(
        Invocation.method(
          #endUITrace,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> endAppLaunch() => (super.noSuchMethod(
        Invocation.method(
          #endAppLaunch,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> networkLogAndroid(Map<String?, Object?>? arg_data) =>
      (super.noSuchMethod(
        Invocation.method(
          #networkLogAndroid,
          [arg_data],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> startCpUiTrace(
    String? arg_screenName,
    int? arg_microTimeStamp,
    int? arg_traceId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #startCpUiTrace,
          [
            arg_screenName,
            arg_microTimeStamp,
            arg_traceId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> reportScreenLoadingCP(
    int? arg_startTimeStampMicro,
    int? arg_durationMicro,
    int? arg_uiTraceId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #reportScreenLoadingCP,
          [
            arg_startTimeStampMicro,
            arg_durationMicro,
            arg_uiTraceId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> endScreenLoadingCP(
    int? arg_timeStampMicro,
    int? arg_uiTraceId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #endScreenLoadingCP,
          [
            arg_timeStampMicro,
            arg_uiTraceId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isEndScreenLoadingEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isEndScreenLoadingEnabled,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [InstabugHostApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockInstabugHostApi extends _i1.Mock implements _i8.InstabugHostApi {
  MockInstabugHostApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> setEnabled(bool? arg_isEnabled) => (super.noSuchMethod(
        Invocation.method(
          #setEnabled,
          [arg_isEnabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isEnabled() => (super.noSuchMethod(
        Invocation.method(
          #isEnabled,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> isBuilt() => (super.noSuchMethod(
        Invocation.method(
          #isBuilt,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> init(
    String? arg_token,
    List<String?>? arg_invocationEvents,
    String? arg_debugLogsLevel,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #init,
          [
            arg_token,
            arg_invocationEvents,
            arg_debugLogsLevel,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> show() => (super.noSuchMethod(
        Invocation.method(
          #show,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> showWelcomeMessageWithMode(String? arg_mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #showWelcomeMessageWithMode,
          [arg_mode],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> identifyUser(
    String? arg_email,
    String? arg_name,
    String? arg_userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #identifyUser,
          [
            arg_email,
            arg_name,
            arg_userId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setUserData(String? arg_data) => (super.noSuchMethod(
        Invocation.method(
          #setUserData,
          [arg_data],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> logUserEvent(String? arg_name) => (super.noSuchMethod(
        Invocation.method(
          #logUserEvent,
          [arg_name],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setLocale(String? arg_locale) => (super.noSuchMethod(
        Invocation.method(
          #setLocale,
          [arg_locale],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setColorTheme(String? arg_theme) => (super.noSuchMethod(
        Invocation.method(
          #setColorTheme,
          [arg_theme],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setWelcomeMessageMode(String? arg_mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWelcomeMessageMode,
          [arg_mode],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setPrimaryColor(int? arg_color) => (super.noSuchMethod(
        Invocation.method(
          #setPrimaryColor,
          [arg_color],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setSessionProfilerEnabled(bool? arg_enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSessionProfilerEnabled,
          [arg_enabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setValueForStringWithKey(
    String? arg_value,
    String? arg_key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setValueForStringWithKey,
          [
            arg_value,
            arg_key,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> appendTags(List<String?>? arg_tags) => (super.noSuchMethod(
        Invocation.method(
          #appendTags,
          [arg_tags],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resetTags() => (super.noSuchMethod(
        Invocation.method(
          #resetTags,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<String?>?> getTags() => (super.noSuchMethod(
        Invocation.method(
          #getTags,
          [],
        ),
        returnValue: _i7.Future<List<String?>?>.value(),
      ) as _i7.Future<List<String?>?>);

  @override
  _i7.Future<void> addExperiments(List<String?>? arg_experiments) =>
      (super.noSuchMethod(
        Invocation.method(
          #addExperiments,
          [arg_experiments],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeExperiments(List<String?>? arg_experiments) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeExperiments,
          [arg_experiments],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearAllExperiments() => (super.noSuchMethod(
        Invocation.method(
          #clearAllExperiments,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addFeatureFlags(
          Map<String?, String?>? arg_featureFlagsMap) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFeatureFlags,
          [arg_featureFlagsMap],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeFeatureFlags(List<String?>? arg_featureFlags) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFeatureFlags,
          [arg_featureFlags],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeAllFeatureFlags() => (super.noSuchMethod(
        Invocation.method(
          #removeAllFeatureFlags,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setUserAttribute(
    String? arg_value,
    String? arg_key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserAttribute,
          [
            arg_value,
            arg_key,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> removeUserAttribute(String? arg_key) => (super.noSuchMethod(
        Invocation.method(
          #removeUserAttribute,
          [arg_key],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String?> getUserAttributeForKey(String? arg_key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserAttributeForKey,
          [arg_key],
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<Map<String?, String?>?> getUserAttributes() => (super.noSuchMethod(
        Invocation.method(
          #getUserAttributes,
          [],
        ),
        returnValue: _i7.Future<Map<String?, String?>?>.value(),
      ) as _i7.Future<Map<String?, String?>?>);

  @override
  _i7.Future<void> setReproStepsConfig(
    String? arg_bugMode,
    String? arg_crashMode,
    String? arg_sessionReplayMode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReproStepsConfig,
          [
            arg_bugMode,
            arg_crashMode,
            arg_sessionReplayMode,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> reportScreenChange(String? arg_screenName) =>
      (super.noSuchMethod(
        Invocation.method(
          #reportScreenChange,
          [arg_screenName],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setCustomBrandingImage(
    String? arg_light,
    String? arg_dark,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCustomBrandingImage,
          [
            arg_light,
            arg_dark,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setFont(String? arg_font) => (super.noSuchMethod(
        Invocation.method(
          #setFont,
          [arg_font],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addFileAttachmentWithURL(
    String? arg_filePath,
    String? arg_fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFileAttachmentWithURL,
          [
            arg_filePath,
            arg_fileName,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addFileAttachmentWithData(
    _i9.Uint8List? arg_data,
    String? arg_fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFileAttachmentWithData,
          [
            arg_data,
            arg_fileName,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> clearFileAttachments() => (super.noSuchMethod(
        Invocation.method(
          #clearFileAttachments,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> networkLog(Map<String?, Object?>? arg_data) =>
      (super.noSuchMethod(
        Invocation.method(
          #networkLog,
          [arg_data],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> registerFeatureFlagChangeListener() => (super.noSuchMethod(
        Invocation.method(
          #registerFeatureFlagChangeListener,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<Map<String?, bool?>> isW3CFeatureFlagsEnabled() =>
      (super.noSuchMethod(
        Invocation.method(
          #isW3CFeatureFlagsEnabled,
          [],
        ),
        returnValue: _i7.Future<Map<String?, bool?>>.value(<String?, bool?>{}),
      ) as _i7.Future<Map<String?, bool?>>);

  @override
  _i7.Future<void> willRedirectToStore() => (super.noSuchMethod(
        Invocation.method(
          #willRedirectToStore,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setNetworkLogBodyEnabled(bool? arg_isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setNetworkLogBodyEnabled,
          [arg_isEnabled],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [IBGBuildInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIBGBuildInfo extends _i1.Mock implements _i10.IBGBuildInfo {
  MockIBGBuildInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);

  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);

  @override
  String get operatingSystem => (super.noSuchMethod(
        Invocation.getter(#operatingSystem),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystem),
        ),
      ) as String);

  @override
  bool get isReleaseMode => (super.noSuchMethod(
        Invocation.getter(#isReleaseMode),
        returnValue: false,
      ) as bool);

  @override
  bool get isDebugMode => (super.noSuchMethod(
        Invocation.getter(#isDebugMode),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i12.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setObfuscateLogCallback(_i12.ObfuscateLogCallback? callback) =>
      super.noSuchMethod(
        Invocation.method(
          #setObfuscateLogCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOmitLogCallback(_i12.OmitLogCallback? callback) => super.noSuchMethod(
        Invocation.method(
          #setOmitLogCallback,
          [callback],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.FutureOr<_i2.NetworkData> obfuscateLog(_i2.NetworkData? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #obfuscateLog,
          [data],
        ),
        returnValue: _i7.Future<_i2.NetworkData>.value(_FakeNetworkData_0(
          this,
          Invocation.method(
            #obfuscateLog,
            [data],
          ),
        )),
      ) as _i7.FutureOr<_i2.NetworkData>);

  @override
  _i7.FutureOr<bool> omitLog(_i2.NetworkData? data) => (super.noSuchMethod(
        Invocation.method(
          #omitLog,
          [data],
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.FutureOr<bool>);
}

/// A class which mocks [W3CHeaderUtils].
///
/// See the documentation for Mockito's code generation for more information.
class MockW3CHeaderUtils extends _i1.Mock implements _i13.W3CHeaderUtils {
  MockW3CHeaderUtils() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void $setRandom(_i14.Random? random) => super.noSuchMethod(
        Invocation.method(
          #$setRandom,
          [random],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.TracePartialId generateTracePartialId() => (super.noSuchMethod(
        Invocation.method(
          #generateTracePartialId,
          [],
        ),
        returnValue: _FakeTracePartialId_1(
          this,
          Invocation.method(
            #generateTracePartialId,
            [],
          ),
        ),
      ) as _i3.TracePartialId);

  @override
  _i4.GeneratedW3CHeader generateW3CHeader(int? networkStartTime) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateW3CHeader,
          [networkStartTime],
        ),
        returnValue: _FakeGeneratedW3CHeader_2(
          this,
          Invocation.method(
            #generateW3CHeader,
            [networkStartTime],
          ),
        ),
      ) as _i4.GeneratedW3CHeader);
}

/// A class which mocks [FeatureFlagsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureFlagsManager extends _i1.Mock
    implements _i15.FeatureFlagsManager {
  MockFeatureFlagsManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void $setHostApi(_i8.InstabugHostApi? host) => super.noSuchMethod(
        Invocation.method(
          #$setHostApi,
          [host],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setFeatureFlagsManager(_i15.FeatureFlagsManager? featureFlagsManager) =>
      super.noSuchMethod(
        Invocation.method(
          #setFeatureFlagsManager,
          [featureFlagsManager],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i5.W3cFeatureFlags> getW3CFeatureFlagsHeader() =>
      (super.noSuchMethod(
        Invocation.method(
          #getW3CFeatureFlagsHeader,
          [],
        ),
        returnValue:
            _i7.Future<_i5.W3cFeatureFlags>.value(_FakeW3cFeatureFlags_3(
          this,
          Invocation.method(
            #getW3CFeatureFlagsHeader,
            [],
          ),
        )),
      ) as _i7.Future<_i5.W3cFeatureFlags>);

  @override
  _i7.Future<void> registerW3CFlagsListener() => (super.noSuchMethod(
        Invocation.method(
          #registerW3CFlagsListener,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onW3CFeatureFlagChange(
    bool? isW3cExternalTraceIDEnabled,
    bool? isW3cExternalGeneratedHeaderEnabled,
    bool? isW3cCaughtHeaderEnabled,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onW3CFeatureFlagChange,
          [
            isW3cExternalTraceIDEnabled,
            isW3cExternalGeneratedHeaderEnabled,
            isW3cCaughtHeaderEnabled,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Random].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandom extends _i1.Mock implements _i14.Random {
  MockRandom() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int nextInt(int? max) => (super.noSuchMethod(
        Invocation.method(
          #nextInt,
          [max],
        ),
        returnValue: 0,
      ) as int);

  @override
  double nextDouble() => (super.noSuchMethod(
        Invocation.method(
          #nextDouble,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool nextBool() => (super.noSuchMethod(
        Invocation.method(
          #nextBool,
          [],
        ),
        returnValue: false,
      ) as bool);
}
