// Mocks generated by Mockito 5.0.7 from annotations
// in instabug_flutter/test/network_logger_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:io' as _i3;

import 'package:instabug_flutter/models/network_data.dart' as _i6;
import 'package:instabug_flutter/utils/http_client_logger.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeDuration extends _i1.Fake implements Duration {}

class _FakeHttpClientRequest extends _i1.Fake implements _i3.HttpClientRequest {
}

class _FakeUri extends _i1.Fake implements Uri {}

class _FakeHttpHeaders extends _i1.Fake implements _i3.HttpHeaders {}

class _FakeHttpClientResponse extends _i1.Fake
    implements _i3.HttpClientResponse {}

class _FakeSocket extends _i1.Fake implements _i3.Socket {}

/// A class which mocks [HttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i3.HttpClient {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Duration get idleTimeout =>
      (super.noSuchMethod(Invocation.getter(#idleTimeout),
          returnValue: _FakeDuration()) as Duration);
  @override
  set idleTimeout(Duration? _idleTimeout) =>
      super.noSuchMethod(Invocation.setter(#idleTimeout, _idleTimeout),
          returnValueForMissingStub: null);
  @override
  set connectionTimeout(Duration? _connectionTimeout) => super.noSuchMethod(
      Invocation.setter(#connectionTimeout, _connectionTimeout),
      returnValueForMissingStub: null);
  @override
  set maxConnectionsPerHost(int? _maxConnectionsPerHost) => super.noSuchMethod(
      Invocation.setter(#maxConnectionsPerHost, _maxConnectionsPerHost),
      returnValueForMissingStub: null);
  @override
  bool get autoUncompress => (super
          .noSuchMethod(Invocation.getter(#autoUncompress), returnValue: false)
      as bool);
  @override
  set autoUncompress(bool? _autoUncompress) =>
      super.noSuchMethod(Invocation.setter(#autoUncompress, _autoUncompress),
          returnValueForMissingStub: null);
  @override
  set userAgent(String? _userAgent) =>
      super.noSuchMethod(Invocation.setter(#userAgent, _userAgent),
          returnValueForMissingStub: null);
  @override
  set authenticate(_i4.Future<bool> Function(Uri, String, String)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticate, f),
          returnValueForMissingStub: null);
  @override
  set findProxy(String Function(Uri)? f) =>
      super.noSuchMethod(Invocation.setter(#findProxy, f),
          returnValueForMissingStub: null);
  @override
  set authenticateProxy(
          _i4.Future<bool> Function(String, int, String, String)? f) =>
      super.noSuchMethod(Invocation.setter(#authenticateProxy, f),
          returnValueForMissingStub: null);
  @override
  set badCertificateCallback(
          bool Function(_i3.X509Certificate, String, int)? callback) =>
      super.noSuchMethod(Invocation.setter(#badCertificateCallback, callback),
          returnValueForMissingStub: null);
  @override
  _i4.Future<_i3.HttpClientRequest> open(
          String? method, String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#open, [method, host, port, path]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> openUrl(String? method, Uri? url) =>
      (super.noSuchMethod(Invocation.method(#openUrl, [method, url]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> get(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#get, [host, port, path]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> getUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#getUrl, [url]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> post(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#post, [host, port, path]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> postUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#postUrl, [url]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> put(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#put, [host, port, path]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> putUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#putUrl, [url]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> delete(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#delete, [host, port, path]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> deleteUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#deleteUrl, [url]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> patch(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#patch, [host, port, path]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> patchUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#patchUrl, [url]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> head(
          String? host, int? port, String? path) =>
      (super.noSuchMethod(Invocation.method(#head, [host, port, path]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  _i4.Future<_i3.HttpClientRequest> headUrl(Uri? url) =>
      (super.noSuchMethod(Invocation.method(#headUrl, [url]),
              returnValue:
                  Future<_i3.HttpClientRequest>.value(_FakeHttpClientRequest()))
          as _i4.Future<_i3.HttpClientRequest>);
  @override
  void addCredentials(
          Uri? url, String? realm, _i3.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(#addCredentials, [url, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void addProxyCredentials(String? host, int? port, String? realm,
          _i3.HttpClientCredentials? credentials) =>
      super.noSuchMethod(
          Invocation.method(
              #addProxyCredentials, [host, port, realm, credentials]),
          returnValueForMissingStub: null);
  @override
  void close({bool? force = false}) =>
      super.noSuchMethod(Invocation.method(#close, [], {#force: force}),
          returnValueForMissingStub: null);
}

/// A class which mocks [HttpClientLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientLogger extends _i1.Mock implements _i5.HttpClientLogger {
  MockHttpClientLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<int, _i6.NetworkData> get requests =>
      (super.noSuchMethod(Invocation.getter(#requests),
          returnValue: <int, _i6.NetworkData>{}) as Map<int, _i6.NetworkData>);
  @override
  void onRequest(_i3.HttpClientRequest? request, {dynamic requestBody}) =>
      super.noSuchMethod(
          Invocation.method(#onRequest, [request], {#requestBody: requestBody}),
          returnValueForMissingStub: null);
  @override
  void onResponse(
          _i3.HttpClientResponse? response, _i3.HttpClientRequest? request,
          {dynamic responseBody}) =>
      super.noSuchMethod(
          Invocation.method(
              #onResponse, [response, request], {#responseBody: responseBody}),
          returnValueForMissingStub: null);
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i1.Mock implements _i3.HttpClientRequest {
  MockHttpClientRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
      Invocation.setter(#persistentConnection, _persistentConnection),
      returnValueForMissingStub: null);
  @override
  bool get followRedirects => (super
          .noSuchMethod(Invocation.getter(#followRedirects), returnValue: false)
      as bool);
  @override
  set followRedirects(bool? _followRedirects) =>
      super.noSuchMethod(Invocation.setter(#followRedirects, _followRedirects),
          returnValueForMissingStub: null);
  @override
  int get maxRedirects =>
      (super.noSuchMethod(Invocation.getter(#maxRedirects), returnValue: 0)
          as int);
  @override
  set maxRedirects(int? _maxRedirects) =>
      super.noSuchMethod(Invocation.setter(#maxRedirects, _maxRedirects),
          returnValueForMissingStub: null);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  set contentLength(int? _contentLength) =>
      super.noSuchMethod(Invocation.setter(#contentLength, _contentLength),
          returnValueForMissingStub: null);
  @override
  bool get bufferOutput =>
      (super.noSuchMethod(Invocation.getter(#bufferOutput), returnValue: false)
          as bool);
  @override
  set bufferOutput(bool? _bufferOutput) =>
      super.noSuchMethod(Invocation.setter(#bufferOutput, _bufferOutput),
          returnValueForMissingStub: null);
  @override
  String get method =>
      (super.noSuchMethod(Invocation.getter(#method), returnValue: '')
          as String);
  @override
  Uri get uri =>
      (super.noSuchMethod(Invocation.getter(#uri), returnValue: _FakeUri())
          as Uri);
  @override
  _i3.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i3.HttpHeaders);
  @override
  List<_i3.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i3.Cookie>[]) as List<_i3.Cookie>);
  @override
  _i4.Future<_i3.HttpClientResponse> get done => (super.noSuchMethod(
          Invocation.getter(#done),
          returnValue:
              Future<_i3.HttpClientResponse>.value(_FakeHttpClientResponse()))
      as _i4.Future<_i3.HttpClientResponse>);
  @override
  _i4.Future<_i3.HttpClientResponse> close() async => MockHttpClientResponse();
  @override
  void abort([Object? exception, StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#abort, [exception, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i1.Mock
    implements _i3.HttpClientResponse {
  MockHttpClientResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get statusCode =>
      (super.noSuchMethod(Invocation.getter(#statusCode), returnValue: 0)
          as int);
  @override
  String get reasonPhrase =>
      (super.noSuchMethod(Invocation.getter(#reasonPhrase), returnValue: '')
          as String);
  @override
  int get contentLength =>
      (super.noSuchMethod(Invocation.getter(#contentLength), returnValue: 0)
          as int);
  @override
  _i3.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(Invocation.getter(#compressionState),
              returnValue: _i3.HttpClientResponseCompressionState.notCompressed)
          as _i3.HttpClientResponseCompressionState);
  @override
  bool get persistentConnection =>
      (super.noSuchMethod(Invocation.getter(#persistentConnection),
          returnValue: false) as bool);
  @override
  bool get isRedirect =>
      (super.noSuchMethod(Invocation.getter(#isRedirect), returnValue: false)
          as bool);
  @override
  List<_i3.RedirectInfo> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i3.RedirectInfo>[]) as List<_i3.RedirectInfo>);
  @override
  _i3.HttpHeaders get headers =>
      (super.noSuchMethod(Invocation.getter(#headers),
          returnValue: _FakeHttpHeaders()) as _i3.HttpHeaders);
  @override
  List<_i3.Cookie> get cookies =>
      (super.noSuchMethod(Invocation.getter(#cookies),
          returnValue: <_i3.Cookie>[]) as List<_i3.Cookie>);
  @override
  _i4.Future<_i3.HttpClientResponse> redirect(
          [String? method, Uri? url, bool? followLoops]) =>
      (super.noSuchMethod(
              Invocation.method(#redirect, [method, url, followLoops]),
              returnValue: Future<_i3.HttpClientResponse>.value(
                  _FakeHttpClientResponse()))
          as _i4.Future<_i3.HttpClientResponse>);
  @override
  _i4.Future<_i3.Socket> detachSocket() =>
      (super.noSuchMethod(Invocation.method(#detachSocket, []),
              returnValue: Future<_i3.Socket>.value(_FakeSocket()))
          as _i4.Future<_i3.Socket>);
}

/// A class which mocks [HttpClientCredentials].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientCredentials extends _i1.Mock
    implements _i3.HttpClientCredentials {
  MockHttpClientCredentials() {
    _i1.throwOnMissingStub(this);
  }
}
