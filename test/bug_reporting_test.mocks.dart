// Mocks generated by Mockito 5.4.4 from annotations
// in instabug_flutter/test/bug_reporting_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:instabug_flutter/src/generated/bug_reporting.api.g.dart' as _i2;
import 'package:instabug_flutter/src/utils/ibg_build_info.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BugReportingHostApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockBugReportingHostApi extends _i1.Mock
    implements _i2.BugReportingHostApi {
  MockBugReportingHostApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> setEnabled(bool? arg_isEnabled) => (super.noSuchMethod(
        Invocation.method(
          #setEnabled,
          [arg_isEnabled],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> show(
    String? arg_reportType,
    List<String?>? arg_invocationOptions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #show,
          [
            arg_reportType,
            arg_invocationOptions,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setInvocationEvents(List<String?>? arg_events) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInvocationEvents,
          [arg_events],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setReportTypes(List<String?>? arg_types) =>
      (super.noSuchMethod(
        Invocation.method(
          #setReportTypes,
          [arg_types],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setExtendedBugReportMode(String? arg_mode) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExtendedBugReportMode,
          [arg_mode],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setInvocationOptions(List<String?>? arg_options) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInvocationOptions,
          [arg_options],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setFloatingButtonEdge(
    String? arg_edge,
    int? arg_offset,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setFloatingButtonEdge,
          [
            arg_edge,
            arg_offset,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setVideoRecordingFloatingButtonPosition(
          String? arg_position) =>
      (super.noSuchMethod(
        Invocation.method(
          #setVideoRecordingFloatingButtonPosition,
          [arg_position],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setShakingThresholdForiPhone(double? arg_threshold) =>
      (super.noSuchMethod(
        Invocation.method(
          #setShakingThresholdForiPhone,
          [arg_threshold],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setShakingThresholdForiPad(double? arg_threshold) =>
      (super.noSuchMethod(
        Invocation.method(
          #setShakingThresholdForiPad,
          [arg_threshold],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setShakingThresholdForAndroid(int? arg_threshold) =>
      (super.noSuchMethod(
        Invocation.method(
          #setShakingThresholdForAndroid,
          [arg_threshold],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setEnabledAttachmentTypes(
    bool? arg_screenshot,
    bool? arg_extraScreenshot,
    bool? arg_galleryImage,
    bool? arg_screenRecording,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setEnabledAttachmentTypes,
          [
            arg_screenshot,
            arg_extraScreenshot,
            arg_galleryImage,
            arg_screenRecording,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> bindOnInvokeCallback() => (super.noSuchMethod(
        Invocation.method(
          #bindOnInvokeCallback,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> bindOnDismissCallback() => (super.noSuchMethod(
        Invocation.method(
          #bindOnDismissCallback,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setDisclaimerText(String? arg_text) => (super.noSuchMethod(
        Invocation.method(
          #setDisclaimerText,
          [arg_text],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setCommentMinimumCharacterCount(
    int? arg_limit,
    List<String?>? arg_reportTypes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCommentMinimumCharacterCount,
          [
            arg_limit,
            arg_reportTypes,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [IBGBuildInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIBGBuildInfo extends _i1.Mock implements _i4.IBGBuildInfo {
  MockIBGBuildInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isAndroid => (super.noSuchMethod(
        Invocation.getter(#isAndroid),
        returnValue: false,
      ) as bool);

  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
      ) as bool);

  @override
  String get operatingSystem => (super.noSuchMethod(
        Invocation.getter(#operatingSystem),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#operatingSystem),
        ),
      ) as String);

  @override
  bool get isReleaseMode => (super.noSuchMethod(
        Invocation.getter(#isReleaseMode),
        returnValue: false,
      ) as bool);

  @override
  bool get isDebugMode => (super.noSuchMethod(
        Invocation.getter(#isDebugMode),
        returnValue: false,
      ) as bool);
}
