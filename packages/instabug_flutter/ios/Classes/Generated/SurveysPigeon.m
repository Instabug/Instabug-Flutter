// Autogenerated from Pigeon (v10.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "SurveysPigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *SurveysFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface SurveysFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation SurveysFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onShowSurveyWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysFlutterApi.onShowSurvey"
      binaryMessenger:self.binaryMessenger
      codec:SurveysFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onDismissSurveyWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysFlutterApi.onDismissSurvey"
      binaryMessenger:self.binaryMessenger
      codec:SurveysFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
@end

NSObject<FlutterMessageCodec> *SurveysHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SurveysHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<SurveysHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"SurveysHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.showSurveyIfAvailable"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showSurveyIfAvailableWithError:)], @"SurveysHostApi api (%@) doesn't respond to @selector(showSurveyIfAvailableWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api showSurveyIfAvailableWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.showSurvey"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showSurveySurveyToken:error:)], @"SurveysHostApi api (%@) doesn't respond to @selector(showSurveySurveyToken:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_surveyToken = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api showSurveySurveyToken:arg_surveyToken error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.setAutoShowingEnabled"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAutoShowingEnabledIsEnabled:error:)], @"SurveysHostApi api (%@) doesn't respond to @selector(setAutoShowingEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAutoShowingEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.setShouldShowWelcomeScreen"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShouldShowWelcomeScreenShouldShowWelcomeScreen:error:)], @"SurveysHostApi api (%@) doesn't respond to @selector(setShouldShowWelcomeScreenShouldShowWelcomeScreen:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_shouldShowWelcomeScreen = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShouldShowWelcomeScreenShouldShowWelcomeScreen:arg_shouldShowWelcomeScreen error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.setAppStoreURL"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAppStoreURLAppStoreURL:error:)], @"SurveysHostApi api (%@) doesn't respond to @selector(setAppStoreURLAppStoreURL:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_appStoreURL = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAppStoreURLAppStoreURL:arg_appStoreURL error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.hasRespondedToSurvey"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasRespondedToSurveySurveyToken:completion:)], @"SurveysHostApi api (%@) doesn't respond to @selector(hasRespondedToSurveySurveyToken:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_surveyToken = GetNullableObjectAtIndex(args, 0);
        [api hasRespondedToSurveySurveyToken:arg_surveyToken completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.getAvailableSurveys"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAvailableSurveysWithCompletion:)], @"SurveysHostApi api (%@) doesn't respond to @selector(getAvailableSurveysWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getAvailableSurveysWithCompletion:^(NSArray<NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.bindOnShowSurveyCallback"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bindOnShowSurveyCallbackWithError:)], @"SurveysHostApi api (%@) doesn't respond to @selector(bindOnShowSurveyCallbackWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api bindOnShowSurveyCallbackWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.SurveysHostApi.bindOnDismissSurveyCallback"
        binaryMessenger:binaryMessenger
        codec:SurveysHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bindOnDismissSurveyCallbackWithError:)], @"SurveysHostApi api (%@) doesn't respond to @selector(bindOnDismissSurveyCallbackWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api bindOnDismissSurveyCallbackWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
