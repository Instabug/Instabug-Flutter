// Autogenerated from Pigeon (v3.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "RepliesPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}



@interface RepliesFlutterApiCodecReader : FlutterStandardReader
@end
@implementation RepliesFlutterApiCodecReader
@end

@interface RepliesFlutterApiCodecWriter : FlutterStandardWriter
@end
@implementation RepliesFlutterApiCodecWriter
@end

@interface RepliesFlutterApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation RepliesFlutterApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[RepliesFlutterApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[RepliesFlutterApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *RepliesFlutterApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    RepliesFlutterApiCodecReaderWriter *readerWriter = [[RepliesFlutterApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface RepliesFlutterApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation RepliesFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onNewReplyWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.RepliesFlutterApi.onNewReply"
      binaryMessenger:self.binaryMessenger
      codec:RepliesFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
@end
@interface RepliesHostApiCodecReader : FlutterStandardReader
@end
@implementation RepliesHostApiCodecReader
@end

@interface RepliesHostApiCodecWriter : FlutterStandardWriter
@end
@implementation RepliesHostApiCodecWriter
@end

@interface RepliesHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation RepliesHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[RepliesHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[RepliesHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *RepliesHostApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    RepliesHostApiCodecReaderWriter *readerWriter = [[RepliesHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void RepliesHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<RepliesHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RepliesHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:RepliesHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"RepliesHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RepliesHostApi.show"
        binaryMessenger:binaryMessenger
        codec:RepliesHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showWithError:)], @"RepliesHostApi api (%@) doesn't respond to @selector(showWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api showWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RepliesHostApi.setInAppNotificationsEnabled"
        binaryMessenger:binaryMessenger
        codec:RepliesHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInAppNotificationsEnabledIsEnabled:error:)], @"RepliesHostApi api (%@) doesn't respond to @selector(setInAppNotificationsEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setInAppNotificationsEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RepliesHostApi.setInAppNotificationSound"
        binaryMessenger:binaryMessenger
        codec:RepliesHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInAppNotificationSoundIsEnabled:error:)], @"RepliesHostApi api (%@) doesn't respond to @selector(setInAppNotificationSoundIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setInAppNotificationSoundIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RepliesHostApi.getUnreadRepliesCount"
        binaryMessenger:binaryMessenger
        codec:RepliesHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUnreadRepliesCountWithCompletion:)], @"RepliesHostApi api (%@) doesn't respond to @selector(getUnreadRepliesCountWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getUnreadRepliesCountWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RepliesHostApi.hasChats"
        binaryMessenger:binaryMessenger
        codec:RepliesHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(hasChatsWithCompletion:)], @"RepliesHostApi api (%@) doesn't respond to @selector(hasChatsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api hasChatsWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RepliesHostApi.bindOnNewReplyCallback"
        binaryMessenger:binaryMessenger
        codec:RepliesHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bindOnNewReplyCallbackWithError:)], @"RepliesHostApi api (%@) doesn't respond to @selector(bindOnNewReplyCallbackWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api bindOnNewReplyCallbackWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
