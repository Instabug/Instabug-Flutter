// Autogenerated from Pigeon (v3.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "InstabugPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}



@interface InstabugHostApiCodecReader : FlutterStandardReader
@end
@implementation InstabugHostApiCodecReader
@end

@interface InstabugHostApiCodecWriter : FlutterStandardWriter
@end
@implementation InstabugHostApiCodecWriter
@end

@interface InstabugHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation InstabugHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[InstabugHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[InstabugHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *InstabugHostApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    InstabugHostApiCodecReaderWriter *readerWriter = [[InstabugHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void InstabugHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<InstabugHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.start"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startToken:invocationEvents:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(startToken:invocationEvents:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_token = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_invocationEvents = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api startToken:arg_token invocationEvents:arg_invocationEvents error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.show"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showWithError:)], @"InstabugHostApi api (%@) doesn't respond to @selector(showWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api showWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.showWelcomeMessageWithMode"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showWelcomeMessageWithModeMode:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(showWelcomeMessageWithModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api showWelcomeMessageWithModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.identifyUser"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(identifyUserEmail:name:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(identifyUserEmail:name:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_email = GetNullableObjectAtIndex(args, 0);
        NSString *arg_name = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api identifyUserEmail:arg_email name:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setUserData"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserDataData:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setUserDataData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setUserDataData:arg_data error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.logUserEvent"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logUserEventName:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(logUserEventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api logUserEventName:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.logOut"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(logOutWithError:)], @"InstabugHostApi api (%@) doesn't respond to @selector(logOutWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api logOutWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setLocale"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocaleLocale:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setLocaleLocale:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_locale = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLocaleLocale:arg_locale error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setColorTheme"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setColorThemeTheme:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setColorThemeTheme:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_theme = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setColorThemeTheme:arg_theme error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setWelcomeMessageMode"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setWelcomeMessageModeMode:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setWelcomeMessageModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setWelcomeMessageModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setPrimaryColor"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPrimaryColorColor:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setPrimaryColorColor:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_color = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setPrimaryColorColor:arg_color error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setSessionProfilerEnabled"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSessionProfilerEnabledEnabled:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setSessionProfilerEnabledEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setSessionProfilerEnabledEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setValueForStringWithKey"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setValueForStringWithKeyValue:key:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setValueForStringWithKeyValue:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_value = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setValueForStringWithKeyValue:arg_value key:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.appendTags"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appendTagsTags:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(appendTagsTags:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_tags = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api appendTagsTags:arg_tags error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.resetTags"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resetTagsWithError:)], @"InstabugHostApi api (%@) doesn't respond to @selector(resetTagsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resetTagsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.getTags"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getTagsWithCompletion:)], @"InstabugHostApi api (%@) doesn't respond to @selector(getTagsWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getTagsWithCompletion:^(NSArray<NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.addExperiments"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addExperimentsExperiments:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(addExperimentsExperiments:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_experiments = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api addExperimentsExperiments:arg_experiments error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.removeExperiments"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeExperimentsExperiments:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(removeExperimentsExperiments:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_experiments = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeExperimentsExperiments:arg_experiments error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.clearAllExperiments"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearAllExperimentsWithError:)], @"InstabugHostApi api (%@) doesn't respond to @selector(clearAllExperimentsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearAllExperimentsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setUserAttribute"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserAttributeValue:key:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setUserAttributeValue:key:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_value = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setUserAttributeValue:arg_value key:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.removeUserAttribute"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeUserAttributeKey:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(removeUserAttributeKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api removeUserAttributeKey:arg_key error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.getUserAttributeForKey"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserAttributeForKeyKey:completion:)], @"InstabugHostApi api (%@) doesn't respond to @selector(getUserAttributeForKeyKey:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        [api getUserAttributeForKeyKey:arg_key completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.getUserAttributes"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUserAttributesWithCompletion:)], @"InstabugHostApi api (%@) doesn't respond to @selector(getUserAttributesWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getUserAttributesWithCompletion:^(NSDictionary<NSString *, NSString *> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setDebugEnabled"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDebugEnabledEnabled:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setDebugEnabledEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setDebugEnabledEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setSdkDebugLogsLevel"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setSdkDebugLogsLevelLevel:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setSdkDebugLogsLevelLevel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_level = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setSdkDebugLogsLevelLevel:arg_level error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setReproStepsMode"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setReproStepsModeMode:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setReproStepsModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setReproStepsModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.reportScreenChange"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportScreenChangeScreenName:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(reportScreenChangeScreenName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_screenName = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportScreenChangeScreenName:arg_screenName error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setCustomBrandingImage"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCustomBrandingImageLight:dark:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setCustomBrandingImageLight:dark:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_light = GetNullableObjectAtIndex(args, 0);
        NSString *arg_dark = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setCustomBrandingImageLight:arg_light dark:arg_dark error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.setFont"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFontFont:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(setFontFont:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_font = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setFontFont:arg_font error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.addFileAttachmentWithURL"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addFileAttachmentWithURLFilePath:fileName:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(addFileAttachmentWithURLFilePath:fileName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_filePath = GetNullableObjectAtIndex(args, 0);
        NSString *arg_fileName = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api addFileAttachmentWithURLFilePath:arg_filePath fileName:arg_fileName error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.addFileAttachmentWithData"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addFileAttachmentWithDataData:fileName:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(addFileAttachmentWithDataData:fileName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FlutterStandardTypedData *arg_data = GetNullableObjectAtIndex(args, 0);
        NSString *arg_fileName = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api addFileAttachmentWithDataData:arg_data fileName:arg_fileName error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.clearFileAttachments"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearFileAttachmentsWithError:)], @"InstabugHostApi api (%@) doesn't respond to @selector(clearFileAttachmentsWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearFileAttachmentsWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.enableAndroid"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enableAndroidWithError:)], @"InstabugHostApi api (%@) doesn't respond to @selector(enableAndroidWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api enableAndroidWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.disableAndroid"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disableAndroidWithError:)], @"InstabugHostApi api (%@) doesn't respond to @selector(disableAndroidWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api disableAndroidWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.InstabugHostApi.networkLog"
        binaryMessenger:binaryMessenger
        codec:InstabugHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(networkLogData:error:)], @"InstabugHostApi api (%@) doesn't respond to @selector(networkLogData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api networkLogData:arg_data error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
