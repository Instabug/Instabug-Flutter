// Autogenerated from Pigeon (v10.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "ApmPigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *ApmHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void ApmHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ApmHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.setColdAppLaunchEnabled"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setColdAppLaunchEnabledIsEnabled:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setColdAppLaunchEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setColdAppLaunchEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.setAutoUITraceEnabled"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAutoUITraceEnabledIsEnabled:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setAutoUITraceEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAutoUITraceEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.startExecutionTrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startExecutionTraceId:name:completion:)], @"ApmHostApi api (%@) doesn't respond to @selector(startExecutionTraceId:name:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_name = GetNullableObjectAtIndex(args, 1);
        [api startExecutionTraceId:arg_id name:arg_name completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.startFlow"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startFlowName:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(startFlowName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startFlowName:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.setFlowAttribute"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFlowAttributeName:key:value:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setFlowAttributeName:key:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        NSString *arg_value = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setFlowAttributeName:arg_name key:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.endFlow"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endFlowName:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(endFlowName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api endFlowName:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.setExecutionTraceAttribute"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setExecutionTraceAttributeId:key:value:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setExecutionTraceAttributeId:key:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        NSString *arg_value = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setExecutionTraceAttributeId:arg_id key:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.endExecutionTrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endExecutionTraceId:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(endExecutionTraceId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api endExecutionTraceId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.startUITrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startUITraceName:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(startUITraceName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startUITraceName:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.endUITrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endUITraceWithError:)], @"ApmHostApi api (%@) doesn't respond to @selector(endUITraceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api endUITraceWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.endAppLaunch"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endAppLaunchWithError:)], @"ApmHostApi api (%@) doesn't respond to @selector(endAppLaunchWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api endAppLaunchWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.ApmHostApi.networkLogAndroid"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(networkLogAndroidData:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(networkLogAndroidData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api networkLogAndroidData:arg_data error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
