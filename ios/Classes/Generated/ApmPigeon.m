// Autogenerated from Pigeon (v3.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "ApmPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}



@interface ApmHostApiCodecReader : FlutterStandardReader
@end
@implementation ApmHostApiCodecReader
@end

@interface ApmHostApiCodecWriter : FlutterStandardWriter
@end
@implementation ApmHostApiCodecWriter
@end

@interface ApmHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ApmHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ApmHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ApmHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ApmHostApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    ApmHostApiCodecReaderWriter *readerWriter = [[ApmHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void ApmHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ApmHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.setColdAppLaunchEnabled"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setColdAppLaunchEnabledIsEnabled:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setColdAppLaunchEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setColdAppLaunchEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.setAutoUITraceEnabled"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setAutoUITraceEnabledIsEnabled:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setAutoUITraceEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setAutoUITraceEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.setLogLevel"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLogLevelLevel:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setLogLevelLevel:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_level = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLogLevelLevel:arg_level error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.startExecutionTrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startExecutionTraceId:name:completion:)], @"ApmHostApi api (%@) doesn't respond to @selector(startExecutionTraceId:name:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_name = GetNullableObjectAtIndex(args, 1);
        [api startExecutionTraceId:arg_id name:arg_name completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.setExecutionTraceAttribute"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setExecutionTraceAttributeId:key:value:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(setExecutionTraceAttributeId:key:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        NSString *arg_value = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api setExecutionTraceAttributeId:arg_id key:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.endExecutionTrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endExecutionTraceId:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(endExecutionTraceId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api endExecutionTraceId:arg_id error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.startUITrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startUITraceName:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(startUITraceName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_name = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api startUITraceName:arg_name error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.endUITrace"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endUITraceWithError:)], @"ApmHostApi api (%@) doesn't respond to @selector(endUITraceWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api endUITraceWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.endAppLaunch"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(endAppLaunchWithError:)], @"ApmHostApi api (%@) doesn't respond to @selector(endAppLaunchWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api endAppLaunchWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ApmHostApi.networkLogAndroid"
        binaryMessenger:binaryMessenger
        codec:ApmHostApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(networkLogAndroidData:error:)], @"ApmHostApi api (%@) doesn't respond to @selector(networkLogAndroidData:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSDictionary<NSString *, id> *arg_data = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api networkLogAndroidData:arg_data error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
