// Autogenerated from Pigeon (v10.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "BugReportingPigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *BugReportingFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BugReportingFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BugReportingFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onSdkInvokeWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingFlutterApi.onSdkInvoke"
      binaryMessenger:self.binaryMessenger
      codec:BugReportingFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSdkDismissDismissType:(NSString *)arg_dismissType reportType:(NSString *)arg_reportType completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingFlutterApi.onSdkDismiss"
      binaryMessenger:self.binaryMessenger
      codec:BugReportingFlutterApiGetCodec()];
  [channel sendMessage:@[arg_dismissType ?: [NSNull null], arg_reportType ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

NSObject<FlutterMessageCodec> *BugReportingHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void BugReportingHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BugReportingHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.show"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showReportType:invocationOptions:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(showReportType:invocationOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_reportType = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_invocationOptions = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api showReportType:arg_reportType invocationOptions:arg_invocationOptions error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setInvocationEvents"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInvocationEventsEvents:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setInvocationEventsEvents:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_events = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setInvocationEventsEvents:arg_events error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setReportTypes"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setReportTypesTypes:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setReportTypesTypes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_types = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setReportTypesTypes:arg_types error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setExtendedBugReportMode"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setExtendedBugReportModeMode:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setExtendedBugReportModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setExtendedBugReportModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setInvocationOptions"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInvocationOptionsOptions:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setInvocationOptionsOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_options = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setInvocationOptionsOptions:arg_options error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setFloatingButtonEdge"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setFloatingButtonEdgeEdge:offset:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setFloatingButtonEdgeEdge:offset:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_edge = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_offset = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setFloatingButtonEdgeEdge:arg_edge offset:arg_offset error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setVideoRecordingFloatingButtonPosition"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVideoRecordingFloatingButtonPositionPosition:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setVideoRecordingFloatingButtonPositionPosition:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_position = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setVideoRecordingFloatingButtonPositionPosition:arg_position error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setShakingThresholdForiPhone"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShakingThresholdForiPhoneThreshold:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setShakingThresholdForiPhoneThreshold:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_threshold = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShakingThresholdForiPhoneThreshold:arg_threshold error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setShakingThresholdForiPad"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShakingThresholdForiPadThreshold:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setShakingThresholdForiPadThreshold:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_threshold = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShakingThresholdForiPadThreshold:arg_threshold error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setShakingThresholdForAndroid"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setShakingThresholdForAndroidThreshold:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setShakingThresholdForAndroidThreshold:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_threshold = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setShakingThresholdForAndroidThreshold:arg_threshold error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setEnabledAttachmentTypes"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledAttachmentTypesScreenshot:extraScreenshot:galleryImage:screenRecording:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setEnabledAttachmentTypesScreenshot:extraScreenshot:galleryImage:screenRecording:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_screenshot = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_extraScreenshot = GetNullableObjectAtIndex(args, 1);
        NSNumber *arg_galleryImage = GetNullableObjectAtIndex(args, 2);
        NSNumber *arg_screenRecording = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api setEnabledAttachmentTypesScreenshot:arg_screenshot extraScreenshot:arg_extraScreenshot galleryImage:arg_galleryImage screenRecording:arg_screenRecording error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.bindOnInvokeCallback"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bindOnInvokeCallbackWithError:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(bindOnInvokeCallbackWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api bindOnInvokeCallbackWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.bindOnDismissCallback"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bindOnDismissCallbackWithError:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(bindOnDismissCallbackWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api bindOnDismissCallbackWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setDisclaimerText"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDisclaimerTextText:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setDisclaimerTextText:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_text = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setDisclaimerTextText:arg_text error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingHostApi.setCommentMinimumCharacterCount"
        binaryMessenger:binaryMessenger
        codec:BugReportingHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setCommentMinimumCharacterCountLimit:reportTypes:error:)], @"BugReportingHostApi api (%@) doesn't respond to @selector(setCommentMinimumCharacterCountLimit:reportTypes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_limit = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_reportTypes = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setCommentMinimumCharacterCountLimit:arg_limit reportTypes:arg_reportTypes error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
