// Autogenerated from Pigeon (v10.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "BugReportingNewPigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

NSObject<FlutterMessageCodec> *BugReportingNewFlutterApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

@interface BugReportingNewFlutterApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation BugReportingNewFlutterApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onSdkInvokeWithCompletion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingNewFlutterApi.onSdkInvoke"
      binaryMessenger:self.binaryMessenger
      codec:BugReportingNewFlutterApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onSdkDismissDismissType:(NSString *)arg_dismissType reportType:(NSString *)arg_reportType completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingNewFlutterApi.onSdkDismiss"
      binaryMessenger:self.binaryMessenger
      codec:BugReportingNewFlutterApiGetCodec()];
  [channel sendMessage:@[arg_dismissType ?: [NSNull null], arg_reportType ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end

NSObject<FlutterMessageCodec> *BugReportingNewHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void BugReportingNewHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<BugReportingNewHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingNewHostApi.setEnabled"
        binaryMessenger:binaryMessenger
        codec:BugReportingNewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setEnabledIsEnabled:error:)], @"BugReportingNewHostApi api (%@) doesn't respond to @selector(setEnabledIsEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_isEnabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setEnabledIsEnabled:arg_isEnabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingNewHostApi.show"
        binaryMessenger:binaryMessenger
        codec:BugReportingNewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(showReportType:invocationOptions:error:)], @"BugReportingNewHostApi api (%@) doesn't respond to @selector(showReportType:invocationOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_reportType = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_invocationOptions = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api showReportType:arg_reportType invocationOptions:arg_invocationOptions error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingNewHostApi.setInvocationEvents"
        binaryMessenger:binaryMessenger
        codec:BugReportingNewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setInvocationEventsEvents:error:)], @"BugReportingNewHostApi api (%@) doesn't respond to @selector(setInvocationEventsEvents:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_events = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setInvocationEventsEvents:arg_events error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingNewHostApi.setReportTypes"
        binaryMessenger:binaryMessenger
        codec:BugReportingNewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setReportTypesTypes:error:)], @"BugReportingNewHostApi api (%@) doesn't respond to @selector(setReportTypesTypes:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_types = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setReportTypesTypes:arg_types error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.instabug_flutter.BugReportingNewHostApi.setExtendedBugReportMode"
        binaryMessenger:binaryMessenger
        codec:BugReportingNewHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setExtendedBugReportModeMode:error:)], @"BugReportingNewHostApi api (%@) doesn't respond to @selector(setExtendedBugReportModeMode:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_mode = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setExtendedBugReportModeMode:arg_mode error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
