version: 2.1

orbs:
  android: circleci/android@2.5.0
  flutter: circleci/flutter@2.0.2
  node: circleci/node@5.2.0
  advanced-checkout: vsco/advanced-checkout@1.1.0

commands:
  setup_flutter:
    steps:
      - flutter/install_sdk_and_pub:
          version: 3.10.5
      - run:
          name: Generate Pigeons
          command: sh ./scripts/pigeon.sh
  setup_ios:
    steps:
      # Flutter doesn't support Apple Silicon yet, so we need to install Rosetta use Flutter on M1 machines.
      - run:
          name: Install Rosetta
          command: softwareupdate --install-rosetta --agree-to-license
      - setup_flutter
      - run:
          name: Install CocoaPods
          command: sudo gem install cocoapods
      - run:
          name: Install Pods
          working_directory: example/ios
          command: pod install --repo-update
  setup_captain:
    parameters:
      platform:
        type: enum
        enum:
          - ios
          - android
    steps:
      - run:
          name: Install Appium
          command: npm install -g appium
      - when:
          condition:
            equal:
              - <<parameters.platform>>
              - ios
          steps:
            - run:
                name: Install XCUITest Driver
                command: appium driver install xcuitest@4.35.0
      - when:
          condition:
            equal:
              - <<parameters.platform>>
              - android
          steps:
            - run:
                name: Install UIAutomator2 Driver
                command: appium driver install uiautomator2@3.1.0
      - run:
          name: Launch Appium
          # Enable --relaxed-security for `mobile: shell` command that Captain uses internally.
          command: appium --relaxed-security
          background: true
      - run:
          name: Install .NET 6
          command: curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 6.0.1xx
      - run:
          name: Add .NET to PATH
          command: |
            echo 'export DOTNET_ROOT=$HOME/.dotnet' >> $BASH_ENV
            echo 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' >> $BASH_ENV
      - run:
          name: Clone Captain
          command: git clone git@github.com:Instabug/Captain.git ../Instabug.Captain
      - run:
          name: Configure Captain Platform
          command: echo 'export CAPTAIN_PLATFORM=<<parameters.platform>>' >> $BASH_ENV
  # This runs `flutter pub get` and `dart pub get` if we pass parameter `generate_pigeons` to the job it also runs the following:
  #   - `sh ./scripts/pigeon.sh`
  #   - `dart run build_runner build --delete-conflicting-outputs`
  install_flutter_and_dart_packages:
    parameters:
      generate_pigeons:
        type: boolean
    steps:
      - run:
          name: Install Flutter Packages
          command: flutter pub get
      - run:
          name: Install Dart Packages
          command: dart pub get
          description: Install Dart Packages (for dart explicit packages)
      - when:
          condition:
            equal:
              - <<parameters.generate_pigeons>>
              - true
          steps:
            - run:
                name: Generate Pigeons
                command: sh ./scripts/pigeon.sh
            - run:
                name: Build Pigeons
                command: dart run build_runner build --delete-conflicting-outputs

jobs:
  danger:
    executor:
      name: node/default
    steps:
      - advanced-checkout/shallow-checkout
      - node/install-packages:
          pkg-manager: yarn
          override-ci-command: yarn install --frozen-lockfile --network-concurrency 1
      - attach_workspace:
          at: coverage
      - run:
          name: Run Danger
          command: yarn danger ci

  test_flutter:
    parameters:
      version:
        type: string
    docker:
      - image: cirrusci/flutter:<<parameters.version>>
    steps:
      - advanced-checkout/shallow-checkout
      - install_flutter_and_dart_packages:
          generate_pigeons: true
      - run: flutter test --coverage
      - run:
          working_directory: coverage
          command: lcov --remove lcov.info '*.g.dart' '*.mocks.dart' -o lcov.info
      - persist_to_workspace:
          root: coverage
          paths:
            - lcov.info

  test_android:
    executor:
      name: android/android-machine
      resource-class: xlarge
      tag: 2024.01.1
    steps:
      - advanced-checkout/shallow-checkout
      - setup_flutter
      - android/run-tests:
          working-directory: example/android
          test-command: ./gradlew test

  e2e_android_captain:
    executor:
      name: android/android-machine
      resource-class: xlarge
      tag: 2024.01.1
    steps:
      - advanced-checkout/shallow-checkout
      - setup_captain:
          platform: android
      - setup_flutter
      - android/start-emulator-and-run-tests:
          run-tests-working-directory: e2e
          additional-avd-args: --device 3
          system-image: system-images;android-33;default;x86_64
          post-emulator-launch-assemble-command: cd example && flutter build apk --debug
          test-command: dotnet test

  test_ios:
    macos:
      xcode: 15.2.0
    resource_class: macos.m1.medium.gen1
    environment:
      INSTABUG_SOURCEMAPS_UPLOAD_DISABLE: true
    steps:
      - advanced-checkout/shallow-checkout
      - setup_ios
      - run:
          name: Build and run tests
          working_directory:  ~/project/example/ios
          command: |
            xcodebuild -allowProvisioningUpdates \
                -workspace Runner.xcworkspace \
                -scheme Runner \
                -resultBundlePath coverage/result.xcresult \
                -sdk iphonesimulator \
                -destination 'platform=iOS Simulator,name=iPhone 15 Pro Max,OS=17.2' \
                test | xcpretty

  e2e_ios_captain:
    macos:
      xcode: 15.2.0
    resource_class: macos.m1.medium.gen1
    steps:
      - advanced-checkout/shallow-checkout
      - setup_captain:
          platform: ios
      - setup_ios
      - run:
          name: Build Example App
          working_directory: example
          command: flutter build ios --simulator
      - run:
          name: Run E2E Tests
          no_output_timeout: 30m
          working_directory: e2e
          command: dotnet test

  format_flutter:
    docker:
      - image: cirrusci/flutter
    steps:
      - advanced-checkout/shallow-checkout
      - install_flutter_and_dart_packages:
          generate_pigeons: false
      - run:
          name: Check Format
          command: dart format . --set-exit-if-changed

  lint_flutter:
    docker:
      - image: cirrusci/flutter
    steps:
      - advanced-checkout/shallow-checkout
      - install_flutter_and_dart_packages:
          generate_pigeons: true
      - run:
          name: Perform Static Analysis
          command: flutter analyze

  verify_pub:
    docker:
      - image: cirrusci/flutter
    steps:
      - advanced-checkout/shallow-checkout
      - install_flutter_and_dart_packages:
          generate_pigeons: true
      - run:
          name: Check Package Score
          command: dart run pana --no-warning --exit-code-threshold 0
      - run: flutter pub publish --dry-run

  release:
    macos:
      xcode: 15.2.0
    resource_class: macos.m1.medium.gen1
    working_directory: "~"
    steps:
      - advanced-checkout/shallow-checkout:
          path: ~/project
      # Flutter doesn't support Apple Silicon yet, so we need to install Rosetta use Flutter on M1 machines.
      - run:
          name: Install Rosetta
          command: softwareupdate --install-rosetta --agree-to-license
      - flutter/install_sdk_and_pub:
          version: 3.3.6
          app-dir: project
      - run:
          name: Install pub packages
          working_directory: ~/project
          command: dart pub get
      - run:
          name: Generate Pigeons
          working_directory: project
          command: sh ./scripts/pigeon.sh
      - run:
          name: Clone Escape
          command: git clone git@github.com:Instabug/Escape.git
      - run:
          name: Build Escape
          working_directory: Escape
          command: |
            swift build -c release
            cp -f .build/release/Escape /usr/local/bin/escape
      - run:
          name: Publish Package
          working_directory: project
          command: Escape flutter publish

workflows:
  version: 2
  build-test-and-approval-deploy:
    jobs:
      - test_android
      - danger:
          requires:
            - test_flutter-stable
      - test_flutter:
          name: test_flutter-stable
          version: stable
      - test_flutter:
          name: test_flutter-2.10.5
          version: 2.10.5
      - e2e_android_captain
      - test_ios
      - e2e_ios_captain
      - format_flutter
      - lint_flutter:
          requires:
            - format_flutter
      - verify_pub:
          requires:
            - lint_flutter
      - hold_release:
          type: approval
          requires:
            - danger
            - test_flutter-stable
            - test_flutter-2.10.5
            - test_android
            # TODO: Fix the flaky tests and add the following jobs to the dependencies for the release
            # The following jobs have been removed while releasing v13.2.0 to avoid delaying the release
            # as they were just flaky and the tests pass locally without issues.
            # - e2e_android_captain
            # - test_ios
            - e2e_ios_captain
            - verify_pub
          filters:
            branches:
              only: master
      - release:
          requires:
            - hold_release
          filters:
            branches:
              only: master